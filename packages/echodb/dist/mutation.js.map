{"version":3,"sources":["../src/mutation.js"],"names":["ValueProtoUtil","createMessage","value","undefined","NULL","BOOLEAN","INTEGER","STRING","OBJECT","Error","bool","integer","float","FLOAT","string","datetime","DATE","fromMessage","console","assert","types","find","type","KeyValueProtoUtil","property","MutationProtoUtil","objectId","options","id","applyMutations","object","messages","forEach","message","applyMutation"],"mappings":"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","sourcesContent":["//\n// Copyright 2019 Wireline, Inc.\n//\n\nimport uuid from 'uuid/v4';\n\n/**\n * Represents scalar, array, and hierarchical values.\n *\n * { null, boolean, number, string }\n */\nexport class ValueProtoUtil {\n\n  static NULL     = 'isNull';\n  static BOOLEAN  = 'boolValue';\n  static INTEGER  = 'intValue';\n  static FLOAT    = 'floatValue';       // TODO(burdon): Detect?\n  static STRING   = 'stringValue';\n  static OBJECT   = 'objectValue';\n\n  static createMessage(value) {\n    if (value === null || value === undefined) {\n      return { [ValueProtoUtil.NULL]: true };\n    } else if (typeof value === 'boolean') {\n      return { [ValueProtoUtil.BOOLEAN]: value };\n    } else if (typeof value === 'number') {\n      return { [ValueProtoUtil.INTEGER]: value };\n    } else if (typeof value === 'string') {\n      return { [ValueProtoUtil.STRING]: value };\n    } else if (typeof value === 'object') {\n      return { [ValueProtoUtil.OBJECT]: value };\n    } else {\n      throw Error(`Illegal value: ${value}`);\n    }\n  }\n\n  static bool(value) {\n    return { [ValueProtoUtil.BOOLEAN]: value };\n  }\n\n  static integer(value) {\n    return { [ValueProtoUtil.INTEGER]: value };\n  }\n\n  static float(value) {\n    return { [ValueProtoUtil.FLOAT]: value };\n  }\n\n  static string(value) {\n    return { [ValueProtoUtil.STRING]: value };\n  }\n\n  static datetime(value) {\n    return { [ValueProtoUtil.DATE]: value };\n  }\n\n  static fromMessage(value) {\n    console.assert(value);\n\n    const types = [\n      ValueProtoUtil.BOOLEAN,\n      ValueProtoUtil.INTEGER,\n      ValueProtoUtil.FLOAT,\n      ValueProtoUtil.STRING,\n      ValueProtoUtil.OBJECT,\n      ValueProtoUtil.DATE\n    ];\n\n    return value[types.find(type => value[type] !== undefined)];\n  }\n}\n\n/**\n * Represents a named property value.\n */\nexport class KeyValueProtoUtil {\n\n  static createMessage(property, value) {\n    console.assert(property);\n\n    return {\n      property,\n      value: ValueProtoUtil.createMessage(value),\n    };\n  }\n}\n\n/**\n * Represents mutations on objects.\n *\n * { id, objectId, property, value, depends }\n */\nexport class MutationProtoUtil {\n\n  static createMessage(objectId, value, options = undefined) {\n    console.assert(objectId);\n\n    return {\n      id: uuid(),\n      objectId,\n      value,\n      ...options\n    };\n  }\n\n  // TODO(burdon): Recursive object, array (see alienlabs).\n\n  static applyMutations(object, messages) {\n    messages.forEach(message => MutationProtoUtil.applyMutation(object, message));\n    return object;\n  }\n\n  static applyMutation(object, message) {\n    const { value: { property, value } } = message;\n\n    if (value[ValueProtoUtil.NULL]) {\n      delete object[property];\n    } else {\n      // TODO(burdon): Check type from proto schema.\n      object[property] = ValueProtoUtil.fromMessage(value);\n    }\n\n    return object;\n  }\n}\n"],"file":"mutation.js"}