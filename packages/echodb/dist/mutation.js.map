{"version":3,"sources":["../src/mutation.js"],"names":["ValueUtil","createMessage","value","undefined","NULL","BOOLEAN","INTEGER","STRING","OBJECT","Error","bool","integer","float","FLOAT","string","datetime","DATE","fromMessage","console","assert","types","find","type","KeyValueUtil","property","MutationUtil","objectId","options","id","applyMutations","object","messages","forEach","message","applyMutation"],"mappings":"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","sourcesContent":["//\n// Copyright 2019 Wireline, Inc.\n//\n\nimport uuid from 'uuid/v4';\n\n/**\n * Represents scalar, array, and hierarchical values.\n *\n * { null, boolean, number, string }\n */\nexport class ValueUtil {\n\n  static NULL     = 'isNull';\n  static BOOLEAN  = 'boolValue';\n  static INTEGER  = 'intValue';\n  static FLOAT    = 'floatValue';       // TODO(burdon): Detect?\n  static STRING   = 'stringValue';\n  static OBJECT   = 'objectValue';\n\n  static createMessage(value) {\n    if (value === null || value === undefined) {\n      return { [ValueUtil.NULL]: true };\n    } else if (typeof value === 'boolean') {\n      return { [ValueUtil.BOOLEAN]: value };\n    } else if (typeof value === 'number') {\n      return { [ValueUtil.INTEGER]: value };\n    } else if (typeof value === 'string') {\n      return { [ValueUtil.STRING]: value };\n    } else if (typeof value === 'object') {\n      return { [ValueUtil.OBJECT]: value };\n    } else {\n      throw Error(`Illegal value: ${value}`);\n    }\n  }\n\n  static bool(value) {\n    return { [ValueUtil.BOOLEAN]: value };\n  }\n\n  static integer(value) {\n    return { [ValueUtil.INTEGER]: value };\n  }\n\n  static float(value) {\n    return { [ValueUtil.FLOAT]: value };\n  }\n\n  static string(value) {\n    return { [ValueUtil.STRING]: value };\n  }\n\n  static datetime(value) {\n    return { [ValueUtil.DATE]: value };\n  }\n\n  static fromMessage(value) {\n    console.assert(value);\n\n    const types = [\n      ValueUtil.BOOLEAN,\n      ValueUtil.INTEGER,\n      ValueUtil.FLOAT,\n      ValueUtil.STRING,\n      ValueUtil.OBJECT,\n      ValueUtil.DATE\n    ];\n\n    return value[types.find(type => value[type] !== undefined)];\n  }\n}\n\n/**\n * Represents a named property value.\n */\nexport class KeyValueUtil {\n\n  static createMessage(property, value) {\n    console.assert(property);\n\n    return {\n      property,\n      value: ValueUtil.createMessage(value),\n    };\n  }\n}\n\n/**\n * Represents mutations on objects.\n *\n * { id, objectId, property, value, depends }\n */\nexport class MutationUtil {\n\n  static createMessage(objectId, value, options = undefined) {\n    console.assert(objectId);\n\n    return {\n      id: uuid(),\n      objectId,\n      value,\n      ...options\n    };\n  }\n\n  // TODO(burdon): Recursive object, array (see alienlabs).\n\n  static applyMutations(object, messages) {\n    messages.forEach(message => MutationUtil.applyMutation(object, message));\n    return object;\n  }\n\n  static applyMutation(object, message) {\n    const { value: { property, value } } = message;\n\n    if (value[ValueUtil.NULL]) {\n      delete object[property];\n    } else {\n      // TODO(burdon): Check type from proto schema.\n      object[property] = ValueUtil.fromMessage(value);\n    }\n\n    return object;\n  }\n}\n"],"file":"mutation.js"}