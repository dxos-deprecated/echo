{"version":3,"sources":["../src/object.js"],"names":["ObjectModel","EventEmitter","Map","fromObjects","objects","reduce","messages","object","concat","fromObject","Object","keys","properties","map","property","MutationUtil","createMessage","id","KeyValueUtil","connect","view","console","assert","_view","on","log","applyMutations","emit","_objectById","getTypes","Array","from","values","set","add","parseId","type","Set","getObjects","filter","reset","clear","commitMutations","mutations","appendMutations","forEach","message","objectId","deleted","delete","get","applyMutation","undefined","parts","split","length"],"mappings":"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","sourcesContent":["//\n// Copyright 2019 Wireline, Inc.\n//\n\nimport { EventEmitter } from 'events';\nimport uuid from 'uuid/v4';\n\nimport { KeyValueUtil, MutationUtil } from './mutation';\n\n/**\n * Simple Object Datastore composed from log mutations.\n */\nexport class ObjectModel extends EventEmitter {\n\n  // TODO(burdon): Dependency Graph: https://www.npmjs.com/package/dependency-graph\n  // TODO(burdon): Determine if model is before or after withLogView.\n\n  /**\n   * Crate unique ID string.\n   * @param {string} type\n   * @param {string} [id]\n   * @return {string} ID\n   */\n  static createId = (type, id = undefined) => {\n    console.assert(type);\n    return `${type}/${id || uuid()}`;\n  };\n\n  /**\n   * Parse ID string.\n   * @param {string} id\n   * @return {{id: *, type: *}}\n   */\n  static parseId = (id) => {\n    const parts = id.split('/');\n    console.assert(parts.length === 2 ? parts[0] : parts[1]);\n    return { type: parts[0], id: parts[1] };\n  };\n\n  /**\n   * Create a set mutation messages from a collection of objects.\n   * @param objects\n   * @return {[]}\n   */\n  static fromObjects(objects) {\n    return objects.reduce((messages, object) => {\n      return messages.concat(ObjectModel.fromObject(object));\n    }, []);\n  }\n\n  static fromObject(object) {\n    return Object.keys(object.properties || {}).map((property) => {\n      return MutationUtil.createMessage(\n        object.id, KeyValueUtil.createMessage(property, object.properties[property])\n      );\n    });\n  }\n\n  // Objects indexed by ID.\n  _objectById = new Map();\n\n  /**\n   * @param {LogViewAdapter} view\n   * @return {ObjectModel}\n   */\n  // TODO(burdon): Add disconnect.\n  connect(view) {\n    console.assert(view);\n    this._view = view;\n\n    view.on('update', (log) => {\n      this.applyMutations(log);\n      this.emit('update', this);\n    });\n\n    return this;\n  }\n\n  // TODO(burdon): Remove.\n  get objects() {\n    return this._objectById;\n  }\n\n  getTypes() {\n    return Array.from(\n      Array.from(this._objectById.values()).reduce((set, { id }) => set.add(ObjectModel.parseId(id).type), new Set())\n    );\n  }\n\n  /**\n   * Returns an unordered array of objects by type.\n   */\n  getObjects(type) {\n    return Array.from(this._objectById.values()).filter(({ id }) => ObjectModel.parseId(id).type === type);\n  }\n\n  reset() {\n    this._objectById.clear();\n    return this;\n  }\n\n  async commitMutations(mutations = []) {\n    console.assert(this._view);\n    return this._view.appendMutations(mutations);\n  }\n\n  // TODO(burdon): Compute delta (from last apply)?\n  applyMutations(mutations = []) {\n    this.reset();\n\n    mutations.forEach((message) => {\n      const { objectId, deleted } = message;\n\n      if (objectId) {\n        if (deleted) {\n          this._objectById.delete(objectId);\n        } else {\n          let object = this._objectById.get(objectId);\n          if (!object) {\n            object = { id: objectId, properties: {} };\n            this._objectById.set(objectId, object);\n          }\n\n          MutationUtil.applyMutation(object.properties, message);\n        }\n      }\n    });\n\n    return this;\n  }\n}\n"],"file":"object.js"}