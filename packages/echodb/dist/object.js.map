{"version":3,"sources":["../src/object.js"],"names":["ObjectModel","EventEmitter","Map","fromObjects","objects","reduce","messages","object","concat","fromObject","Object","keys","properties","map","property","MutationProtoUtil","createMessage","id","KeyValueProtoUtil","mergeFeeds","feeds","merged","Set","feedCursors","position","pending","sort","nextIndex","current","count","length","next","index","message","depends","has","forEach","add","push","connect","view","console","assert","_view","on","log","applyMutations","emit","_objectById","getTypes","Array","from","values","set","parseId","type","getObjects","filter","reset","clear","commitMutations","mutations","appendMutations","objectId","deleted","delete","get","applyMutation","undefined","parts","split"],"mappings":"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","sourcesContent":["//\n// Copyright 2019 Wireline, Inc.\n//\n\nimport { EventEmitter } from 'events';\nimport uuid from 'uuid/v4';\n\nimport { KeyValueProtoUtil, MutationProtoUtil } from './mutation';\nimport { sortByProperty } from './util';\n\n/**\n * Simple Object Datastore composed from log mutations.\n */\nexport class ObjectModel extends EventEmitter {\n\n  // TODO(burdon): Move to wireline-core (replace kappa).\n  // TODO(burdon): Determine if model is before or after withLogView.\n\n  /**\n   * Crate unique ID string.\n   * @param {string} type\n   * @param {string} [id]\n   * @return {string} ID\n   */\n  static createId = (type, id = undefined) => {\n    console.assert(type);\n    return `${type}/${id || uuid()}`;\n  };\n\n  /**\n   * Parse ID string.\n   * @param {string} id\n   * @return {{id: *, type: *}}\n   */\n  static parseId = (id) => {\n    const parts = id.split('/');\n    console.assert(parts.length === 2 ? parts[0] : parts[1]);\n    return { type: parts[0], id: parts[1] };\n  };\n\n  /**\n   * Create a set mutation messages from a collection of objects.\n   * @param objects\n   * @return {[]}\n   */\n  static fromObjects(objects) {\n    return objects.reduce((messages, object) => {\n      return messages.concat(ObjectModel.fromObject(object));\n    }, []);\n  }\n\n  static fromObject(object) {\n    return Object.keys(object.properties || {}).map((property) => {\n      return MutationProtoUtil.createMessage(\n        object.id, KeyValueProtoUtil.createMessage(property, object.properties[property])\n      );\n    });\n  }\n\n  /**\n   * Merge the given feeds, respecting the order when messages include the ID of a previous message.\n   * @param {[{ id, messages }]} feeds\n   * @return {[{Message}]}\n   */\n  static mergeFeeds(feeds) {\n\n    // Ordered list of merged messages.\n    const merged = [];\n\n    // Set of already merged objects (used to unlock pending messages).\n    const messages = new Set();\n\n    // Initial feed cursors (sorted to ensure deterministic processing of messages.\n    const feedCursors = feeds\n      .map(() => ({ position: 0, pending: null }))\n      .sort(sortByProperty('id'));\n\n    // Gets the index of the next available feed to process.\n    const nextIndex = (current) => {\n      let count = feedCursors.length;\n\n      let next = -1;\n      while (count > 0 && next === -1) {\n        if (++current === feedCursors.length) {\n          current = 0;\n        }\n\n        // Skip if exhausted or pending.\n        // TODO(burdon): Currently each feed blocks until the depending mutation is resolved, but we could\n        // restrict the dependencies to individual objects and create multiple concurrent DAGs.\n        if (feedCursors[current].position === feeds[current].messages.length || feedCursors[current].pending) {\n          count--;\n          continue;\n        }\n\n        next = current;\n      }\n\n      return next;\n    };\n\n    // Breadth-first merge.\n    let current = -1;\n    while ((current = nextIndex(current)) !== -1) {\n      const index = feedCursors[current];\n\n      // Continue if pending.\n      const message = feeds[current].messages[index.position];\n      if (message.depends && !messages.has(message.depends)) {\n        index.pending = message.depends;\n        continue;\n      }\n\n      // Unlock pending messages.\n      feedCursors.forEach((index) => {\n        if (index.pending === message.id) {\n          index.pending = null;\n        }\n      });\n\n      // Append the message and increment the cursor.\n      messages.add(message.id);\n      merged.push(message);\n      index.position++;\n    }\n\n    return merged;\n  }\n\n  // Objects indexed by ID.\n  _objectById = new Map();\n\n  /**\n   * @param {LogViewAdapter} view\n   * @return {ObjectModel}\n   */\n  // TODO(burdon): Add disconnect.\n  connect(view) {\n    console.assert(view);\n    this._view = view;\n\n    view.on('update', (log) => {\n      this.applyMutations(log);\n      this.emit('update', this);\n    });\n\n    return this;\n  }\n\n  // TODO(burdon): Remove.\n  get objects() {\n    return this._objectById;\n  }\n\n  getTypes() {\n    return Array.from(\n      Array.from(this._objectById.values()).reduce((set, { id }) => set.add(ObjectModel.parseId(id).type), new Set())\n    );\n  }\n\n  /**\n   * Returns an unordered array of objects by type.\n   */\n  getObjects(type) {\n    return Array.from(this._objectById.values()).filter(({ id }) => ObjectModel.parseId(id).type === type);\n  }\n\n  reset() {\n    this._objectById.clear();\n    return this;\n  }\n\n  async commitMutations(mutations = []) {\n    console.assert(this._view);\n    return this._view.appendMutations(mutations);\n  }\n\n  // TODO(burdon): Compute delta (from last apply)?\n  applyMutations(mutations = []) {\n    this.reset();\n\n    mutations.forEach((message) => {\n      const { objectId, deleted } = message;\n\n      if (objectId) {\n        if (deleted) {\n          this._objectById.delete(objectId);\n        } else {\n          let object = this._objectById.get(objectId);\n          if (!object) {\n            object = { id: objectId, properties: {} };\n            this._objectById.set(objectId, object);\n          }\n\n          MutationProtoUtil.applyMutation(object.properties, message);\n        }\n      }\n    });\n\n    return this;\n  }\n}\n"],"file":"object.js"}