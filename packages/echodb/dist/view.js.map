{"version":3,"sources":["../src/view.js"],"names":["LogViewAdapter","EventEmitter","createView","framework","bucketId","viewName","viewManager","registerView","name","kappa","api","constructor","view","console","assert","_view","_bucketId","_log","onChange","log","changes","emit","getLog","getLogs","appendMutations","mutations","mutation","appendChange"],"mappings":";;;;;;;AAIA;;AAJA;AACA;AACA;;AAIA;;;AAGO,MAAMA,cAAN,SAA6BC,oBAA7B,CAA0C;AAE/C,eAAaC,UAAb,CAAwBC,SAAxB,EAAmCC,QAAnC,EAA6C;AAE3C;AACA,UAAMC,QAAQ,GAAG,MAAjB,CAH2C,CAK3C;;AACAF,IAAAA,SAAS,CAACG,WAAV,CAAsBC,YAAtB,CAAmC;AAAEC,MAAAA,IAAI,EAAEH;AAAR,KAAnC;AAEA,WAAO,IAAIL,cAAJ,CAAmBG,SAAS,CAACM,KAAV,CAAgBC,GAAhB,CAAoBL,QAApB,CAAnB,EAAkDD,QAAlD,CAAP;AACD;AAED;;;;;;AAIAO,EAAAA,WAAW,CAACC,IAAD,EAAOR,QAAP,EAAiB;AAC1B;AACAS,IAAAA,OAAO,CAACC,MAAR,CAAeF,IAAf;AACAC,IAAAA,OAAO,CAACC,MAAR,CAAeV,QAAf;AAEA,SAAKW,KAAL,GAAaH,IAAb;AACA,SAAKI,SAAL,GAAiBZ,QAAjB;AAEA,SAAKa,IAAL,GAAY,EAAZ;;AACA,SAAKF,KAAL,CAAWG,QAAX,CAAoBd,QAApB,EAA+Be,GAAD,IAAS;AACrC,YAAM;AAAEC,QAAAA;AAAF,UAAcD,GAApB;AACA,WAAKF,IAAL,GAAYG,OAAZ;AAEA,WAAKC,IAAL,CAAU,QAAV,EAAoB,KAAKJ,IAAzB;AACD,KALD;AAMD;;AAED,MAAIE,GAAJ,GAAU;AACR,WAAO,KAAKF,IAAZ;AACD;;AAED,QAAMK,MAAN,GAAe;AACb,WAAO,KAAKP,KAAL,CAAWQ,OAAX,CAAmB,KAAKP,SAAxB,CAAP;AACD;;AAED,QAAMQ,eAAN,CAAsBC,SAAtB,EAAiC;AAC/B,SAAK,MAAMC,QAAX,IAAuBD,SAAvB,EAAkC;AAChC,YAAM,KAAKV,KAAL,CAAWY,YAAX,CAAwB,KAAKX,SAA7B,EAAwCU,QAAxC,CAAN;AACD;AACF;;AA9C8C","sourcesContent":["//\n// Copyright 2019 Wireline, Inc.\n//\n\nimport { EventEmitter } from 'events';\n\n/**\n * Wraps kappa view, provising synchronous access to logs.\n */\nexport class LogViewAdapter extends EventEmitter {\n\n  static async createView(framework, bucketId) {\n\n    // User data is not differentiated by \"type\" (just bucket).\n    const viewName = 'data';\n\n    // Creates a LogsView instance.\n    framework.viewManager.registerView({ name: viewName });\n\n    return new LogViewAdapter(framework.kappa.api[viewName], bucketId);\n  }\n\n  /**\n   * @param {LogsView} view - View wraps kappa view.\n   * @param bucketId - Data bucket.\n   */\n  constructor(view, bucketId) {\n    super();\n    console.assert(view);\n    console.assert(bucketId);\n\n    this._view = view;\n    this._bucketId = bucketId;\n\n    this._log = [];\n    this._view.onChange(bucketId, (log) => {\n      const { changes } = log;\n      this._log = changes;\n\n      this.emit('update', this._log);\n    });\n  }\n\n  get log() {\n    return this._log;\n  }\n\n  async getLog() {\n    return this._view.getLogs(this._bucketId);\n  }\n\n  async appendMutations(mutations) {\n    for (const mutation of mutations) {\n      await this._view.appendChange(this._bucketId, mutation);\n    }\n  }\n}\n"],"file":"view.js"}