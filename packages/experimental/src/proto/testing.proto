//
// Copyright 2020 DXOS.org
//

syntax = "proto3";

package dxos.echo.testing;

import "google/protobuf/any.proto";

//
// Typescript Note:
// Use the interface name in code (e.g., IFeedEvenlope) and the concrete class name in the __type_url reference.
//

//
// Feeds
//

// Outer codec message type decoded by Codec.
// NOTE: Hypercore returns a field called `data`, which corresponds to this envelope (not the contained message).
// TODO(burdon): Reserve `payload` for outer most message (rename in HALO, ECHO, etc.)
message FeedEnvelope {
  google.protobuf.Any payload = 1;
}

// Wrapped feed message
message FeedMessage {
  // Feed payload object (above).
  google.protobuf.Any payload = 1;

  // Non-persistent metadata.
  bytes feedKey = 2;
  bytes identityKey = 3;
}

// Must be first block in each feed.
message FeedGenesis {
  // Optional for genesis feed.
  PartyGenesis partyGenesis = 1;
}

//
// Parties
//

// Indicates creation of a party.
message PartyGenesis {
  bytes feedKey = 1;
}

// Admit to party.
message PartyAdmit {
  bytes feedKey = 1;
}

// Reject from party.
message PartyEject {
  bytes feedKey = 1;
}

//
// Items
//

// Vector timestamp used to order messages.
message VectorTimestamp {
  message Feed {
    // TODO(burdon): Remove (see below)?
    bytes feedKey = 1;
    // TODO(burdon): Determine if admit DAG can be ordered. Requires party messages to be ordered (by lexical feed key).
    int32 feedIndex = 2;
    int32 seq = 3;
  }

  repeated Feed timestamp = 1;
}

// Wrapper (payload) for all ECHO item messages.
message ItemEnvelope {
  string itemId = 1;
  VectorTimestamp timestamp = 2;

  oneof action {
    ItemGenesis genesis = 3;
    google.protobuf.Any operation = 4;
  }
}

// Item creation.
message ItemGenesis {
  string itemType = 1;
  string modelType = 2;
  string modelVersion = 3;
}

//
// Testing
//

// Item mutation.
message TestItemMutation {
  string key = 1;
  string value = 2;
}

message TestMessage {
  int32 value = 1;
}
